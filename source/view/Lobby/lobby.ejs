<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>E-Tutorial Lobby</title>
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
    </head>

    <body>
		<div class="container" id="header-bar">
			<div class="row">
				<div class="text-center col-md-12">
					<h1>Welcome to <%= moduleId %> <%= tutorialId %>'s Lobby!</h1>
				</div>
			</div>
		</div>
		<div class="container">
			<div class="row" id="lobby-container">
				<div class="col-md-8 col-sm-6 col-xs-6" id="chat-container">
					<div class="row">
						<h2> Messages </h2>
					</div>
					<div class="row">
						<div class="chat-area" style="width:100%; max-height:300px; overflow:auto;">
							<ul class="messages"></ul>
						</div>
					</div>
					<div class="row">
						<input class="inputMessage" style="width:100%;" placeholder="Type here..."/>
					</div>
				</div>
				<div class="col-md-4 col-sm-6 col-xs-6" id="userlist-container">
					<div class="text-center row">
						<h2> Active Users </h2>
					</div>
					<div class="row">
						<div class="usersList">
							<ul class="Users"></ul>
						</div>
					</div>
				</div>
			</div>
		</div>

        <script src="https://code.jquery.com/jquery-1.10.2.min.js"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
        <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.7.3/socket.io.min.js"></script>
        <script>
            $(function() {
                var FADE_TIME = 150; // ms
                var TYPING_TIMER_LENGTH = 400; // ms
                var COLORS = [
                '#e21400', '#91580f', '#f8a700', '#f78b00',
                '#58dc00', '#287b00', '#a8f07a', '#4ae8c4',
                '#3b88eb', '#3824aa', '#a700ff', '#d300e7'
                ];

                //Initialize variables
                var $window = $(window);
                var $messages = $('.messages'); //Messages area
                var $inputMessage = $('.inputMessage'); //Input message input box

                var $loginPage = $('.login.page'); //The login page
                var $chatPage = $('.chat.page'); //The chatroom page
                var $createGame = $('.createGame'); 
                var $joinGame = $('.joinGame'); 

                //Prompt for setting a username
                var username = "<%= userId %>";
                var connected = false;
                var typing = false;
                var lastTypingTime;
                var $currentInput = $inputMessage.focus();

                var socket = io();

                function addParticipantsMessage (data) {
                    var message = '';
                    if (data.numUsers === 1) {
                        message += "It's just you and me, honey bee.";
                    } else {
                        message += "There are " + data.numUsers + " players in the Lobby";
                    }
                    log(message);
                }

                //Sends a chat message
                function sendMessage () {
                    var message = $inputMessage.val();
                    
                    //Prevent markup from being injected into the message
                    message = cleanInput(message);
                    
                    //If there is a non-empty message and a socket connection
                    if (message && connected) {
                        $inputMessage.val('');
                        
                        addChatMessage({
                            username: username,
                            message: message
                        });
                        
                        //Tell server to execute 'new message' and send along one parameter
                        socket.emit ('new message', message);
                    }
                }
				
                //Log a message
                function log (message, options) {
                    var $el = $('<li>').addClass('log').text(message);
                    addMessageElement ($el, options);
                }

                //Adds the visual chat message to the message list
                function addChatMessage (data, options) {
                    //Don't fade the message in if there is an 'X was typing'
                    var $typingMessages = getTypingMessages(data);
                    options = options || {};
                    if ($typingMessages.length !== 0) {
                        options.fade = false;
                        $typingMessages.remove();
                    }

                    var $usernameDiv = $('<span class="username"/>')
                        .text (data.username)
                        .css('color', getUsernameColor(data.username));
                    
                    var $messageBodyDiv = $('<span class="messageBody">')
                        .text(data.message);

                    var typingClass = data.typing ? 'typing' : '';
                    var $messageDiv = $('<li class="message"/>')
                        .data('username', data.username)
                        .addClass(typingClass)
                        .append($usernameDiv, $messageBodyDiv);

                    addMessageElement($messageDiv, options);
                }

                // Adds the visual chat typing message
                function addChatTyping (data) {
                    data.typing = true;
                    data.message = 'is typing';
                    addChatMessage (data);
                }

                //Removes the visual chat typing message
                function removeChatTyping (data) {
                    getTypingMessages(data).fadeOut (function () {
                        $(this).remove();
                    });
                }

                //Adds a message element to the messages and scrolls to the bottom
                //el                The element to add as a message
                //options.fade      If the element should fade-in (default = true)
                //options.prepend   If the element should prepend all other messages (default = false)
                function addMessageElement (el, options) {
                    var $el = $(el);

                    //Setup default options
                    if (!options) {
                        options = {};
                    }
                    if (typeof options.fade === 'undefined') {
                        options.fade = true;
                    }
                    if (typeof options.prepend === 'undefined') {
                        options.prepend = false;
                    }

                    //Apply options
                    if (options.fade) {
                        $el.hide().fadeIn(FADE_TIME);
                    }
                    if (options.prepend) {
                        $messages.prepend($el);
                    } else {
                        $messages.append($el);
                    }
                    
                    $messages[0].scrollTop = $messages[0].scrollHeight;
                }

                //Prevents input from having injected markup
                function cleanInput (input) {
                    return $('<div/>').text(input).text();
                }

                // Updates the typing event
                function updateTyping () {
                    if (connected) {
                        if (!typing) {
                            typing = true;
                            socket.emit('typing');
                        }
                        
                        lastTypingTime = (new Date()).getTime();
                        setTimeout(function () {
                            var typingTimer = (new Date()).getTime();
                            var timeDiff = typingTimer - lastTypingTime;
                            if (timeDiff >= TYPING_TIMER_LENGTH && typing) {
                                socket.emit('stop typing');
                                typing = false;
                            }
                        }, TYPING_TIMER_LENGTH);
                    }
                }

                //Gets the 'X is typing' messages of a user
                function getTypingMessages (data) {
                    return $('.typing.message').filter (function (i) {
                        return $(this).data('username') === data.username;
                    });
                }

                //Gets the color of a username through our hash function
                function getUsernameColor (username) {
                    //Compute hash code
                    var hash = 7;
                    for (var i = 0; i < username.length; i++) {
                        hash = username.charCodeAt(i) + (hash << 5) - hash;
                    }
                    
                    //Calculate color
                    var index = Math.abs(hash % COLORS.length);
                    return COLORS[index];
                }

                //Keyboard events

                $window.keydown (function (event) {
                    //Auto-focus the current input when a key is typed
                    if (!(event.ctrlKey || event.metaKey || event.altKey)) {
                        $currentInput.focus();
                    }
                    
                    //When the client hits ENTER on their keyboard
                    if (event.which === 13) {
                        if (username) {
                            sendMessage();
                            socket.emit('stop typing');
                            typing = false;
                        }
                    }
                });

                $inputMessage.on ('input', function() {
                    updateTyping();
                });

                // Click events

                //Focus input when clicking on the message input's border
                $inputMessage.click (function () {
                    $inputMessage.focus();
                });

                $createGame.click(function () {
                    sendGame();
                })


                //Socket events

                //Send this event to notify server of a new connection.
                socket.on ('connect', function() {
                    var userId = "<%=userId %>";
                    var moduleId = "<%=moduleId %>";
                    var tutorialId = "<%=tutorialId %>";
                    
                    var data = {
                        'userId' : userId,
                        'moduleId' : moduleId,
                        'tutorialId' : tutorialId
                    };
                    
                    socket.emit ('new connection', data);
                });
                
                //Whenever the server emits 'login', log the login message
                socket.on ('login', function (data) {
                    connected = true;
                    //Display the welcome message
                    var message = "Welcome to the Lobby ";
                    log (message, {
                        prepend: true
                    });
                    addParticipantsMessage (data);
                });

                //Whenever the server emits 'new message', update the chat body
                socket.on ('new message', function (data) {
                    addChatMessage (data);
                });

                // Whenever the server emits 'user joined', log it in the chat body
                socket.on ('user joined', function (data) {
                    log (data.username + ' joined');
                    addParticipantsMessage (data);
                });

                //Whenever the server emits 'user left', log it in the chat body
                socket.on ('user left', function (data) {
                    log (data.username + ' left');
                    addParticipantsMessage (data);
                    removeChatTyping (data);
                });

                //Whenever the server emits 'typing', show the typing message
                socket.on ('typing', function (data) {
                    addChatTyping(data);
                });

                //Whenever the server emits 'stop typing', kill the typing message
                socket.on ('stop typing', function (data) {
                    removeChatTyping(data);
                });

                socket.on ('battle created', function (data) {
                    console.log ("Game Created! ID is: " + data.gameId)
                    log (data.username + ' created Game: ' + data.gameId);
                });

                function sendGame(){
                    socket.emit('start battle');
                };
            });
        </script>
    </body>
</html>