<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>E-Tutorial Lobby</title>
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
    </head>

    <body ng-app="lobbyApp">
		<div ng-controller="socketCtrl" class="container" id="header-bar">
			<div class="row">
				<div class="text-center col-md-12">
					<h1>Welcome to <%= moduleId %> <%= tutorialId %>'s Lobby!</h1>
				</div>
			</div>
		</div>
		<div class="container">
			<div class="row" id="battle-container">
				<div ng-controller="questionComposerCtrl" class="col-md-6 col-sm-6 col-xs-6" id="question-list-container">
					<div class="row">
						<h2> Question Composer </h2>
					</div>
					<div class="row">
						<div class="question-area" style="width:100%; max-height:300px; overflow:auto;">
							<textarea class="question-description-input" style="width:100%;" ng-model="composerQuestion.description" placeholder="Type question..."></textarea>
						</div>
					</div>
					<div class="row">
						<div class="question-options-area" style="width:100%; max-height:300px; overflow:auto;">
							<ul class="options-composed-list">
                                <li class="question-option-composed" ng-repeat="option in composerQuestion.options">
                                    <div class="container-fluid">
                                        <div class="row-fluid">
                                            <div class="col-md-8 col-sm-8 col-xs-8">
                                                <input class="option-description-input" ng-model="option.description" placeholder="Type option..."></input>
                                            </div>
                                            <div class="col-md-4 col-sm-4 col-xs-4">
                                                <input type="checkbox" ng-model="option.isCorrect"></input>
                                            </div>
                                        </div>
                                    </div>
                                </li>
                            </ul>
						</div>
					</div>
					<div class="row">
						<button class="btn btn-info add-question-option" ng-click="addOption()">Add Option</button>
						<button class="btn btn-success send-question" style="float:right;" ng-click="sendQuestion()">Attack!</button>
					</div>
				</div>
                
				<div ng-controller="questionReceiverCtrl" class="col-md-4 col-sm-6 col-xs-6" id="userlist-container">
					<div class="text-center row">
						<h2> Combat Log </h2>
					</div>
					<div class="row">
						<div class="questions-received-area" style="width:100%; max-height:300px; overflow:auto;">
							<ul class="questions-received-list">
                                <li class="question-received" ng-repeat="question in questions">
                                    <div class="container-fluid">
                                        <div class="row-fluid">
                                            <h3>{{question.description}}</h3>
                                        </div>
                                        <div class="question-received-options">
                                            <div ng-repeat="option in question.options" class="row-fluid">
                                                <div class="col-md-8 col-sm-8 col-xs-8">
                                                    {{ option.description }}
                                                </div>
                                                <div class="col-md-4 col-sm-4 col-xs-4">
                                                    <input ng-disabled="question.submitted" type="checkbox" ng-model="option.selected"></input>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row-fluid">
                                            <button class="btn btn-success submit-answer" ng-if="!question.answered" ng-click="sendAnswer($index)" style="float:right;">Submit!</button>
                                            <div ng-if="question.submitted">
                                            	{{question.remarks}}
                                            </div>
                                        </div>
                                    </div>
                                </li>
                            </ul>
						</div>
					</div>
				</div>
			</div>
			<div class="row" id="lobby-container">
				<div ng-controller="chatCtrl" class="col-md-8 col-sm-6 col-xs-6" id="chat-container">
					<div class="row">
						<h2> Messages </h2>
					</div>
					<div class="row">
						<div class="chat-area" style="width:100%; max-height:300px; overflow:auto;">
							<ul class="messages">
								<li ng-repeat="message in messages"
									ng-class="{'log' : message.type=='log', 'typing' : message.type=='typing', 'message' : message.type=='message' || message.type=='typing'}"
									data-username="{{message.user}}">
									<div ng-if="message.type == 'chat'">
										<span class="username" ng-bind="message.user" style="color:{{getUsernameColor(message.user)}}; padding-right:5px;"></span>
										<span class="messageBody" ng-bind="message.message"></span>
									</div>
									<div ng-if="message.type == 'log'">
										{{ message.message }}
									</div>
									<div ng-if="message.type == 'typing'">
										<span class="username" ng-bind="message.user" style="color:{{getUsernameColor(message.user)}}; padding-right:5px;"></span>
										<span class="messageBody" ng-bind="message.message"></span>
									</div>
								</li>
							</ul>
						</div>
					</div>
					<div class="row">
						<input class="inputMessage" style="width:100%;" ng-model="chatMessage" ng-enter="sendMessage()" ng-change="updateTyping()" placeholder="Type here..."/>
					</div>
				</div>
				<div ng-controller="activeUsersCtrl" class="col-md-4 col-sm-6 col-xs-6" id="userlist-container">
					<div class="text-center row">
						<h2> Active Users </h2>
					</div>
					<div class="row">
						<div class="usersList">
							<ul class="Users"></ul>
						</div>
					</div>
				</div>
			</div>
		</div>

        <script src="https://code.jquery.com/jquery-1.10.2.min.js"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
        <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.7.3/socket.io.min.js"></script>
		<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
        <script>
		
			var lobbyApp = angular.module('lobbyApp', []);
			
			lobbyApp.factory('socket', function ($rootScope) {
				var socket = io.connect();
				return {
					on: function (eventName, callback) {
						socket.on (eventName, function () {  
							var args = arguments;
							$rootScope.$apply (function () {
								callback.apply (socket, args);
							});
						});
					},
					emit: function (eventName, data, callback) {
						socket.emit(eventName, data, function () {
							var args = arguments;
							$rootScope.$apply (function () {
								if (callback) {
									callback.apply (socket, args);
								}
							});
						})
					}
				};	
			});
			
			//Directive for calling function on enter key
			//Usage:
			//		ng-enter="functionName()"
			lobbyApp.directive ('ngEnter', function () {
				return function (scope, element, attrs) {
					element.bind("keydown keypress", function (event) {
						if (event.which === 13) {
							scope.$apply(function (){
								scope.$eval(attrs.ngEnter);
							});
							event.preventDefault();
						}
					});
				};
			});
            
            //Controller for socket events used throughout the page.
            lobbyApp.controller ('socketCtrl', function ($scope, socket) {
                //Send this event to notify server of a new connection.
                socket.on ('connect', function() {
                    var userId = "<%=userId %>";
                    var moduleId = "<%=moduleId %>";
                    var tutorialId = "<%=tutorialId %>";
                    
                    var data = {
                        'userId' : userId,
                        'moduleId' : moduleId,
                        'tutorialId' : tutorialId
                    };
                    
                    socket.emit ('new connection', data);
                });
            });
			
			lobbyApp.controller ('questionComposerCtrl', function($scope, socket) {
                $scope.composerQuestion = {
                    'description' : '',
                    'options' : []
                };
                
                //Adds an option to the MCQ attack composer.
				$scope.addOption = function () {
					$scope.composerQuestion.options.push ({
						'description' : '',
						'isCorrect' : false
					});
				};

				$scope.sendQuestion = function () {
					socket.emit ('new question', $scope.composerQuestion);
					$scope.composerQuestion = {
						'description' : '',
                    	'options' : []
					};
				};
			});
            
            lobbyApp.controller ('questionReceiverCtrl', function($scope, socket) {
                $scope.questions = [];
                
                //Socket events

				//Receives questions received from other users.
                socket.on ('add question', function (data) {
					data.answered = false;
					data.submitted = false;
					data.remarks = "";
					data.options.forEach ( function (option) {
						option.selected = false;
					});
					$scope.questions.push (data);
                });

                //Receives questions received from other users.
                socket.on ('wrong answer', function (data) {
					$scope.questions[data].submitted = true;
					$scope.questions[data].remarks = "You are wrong!";
                });

                //Receives questions received from other users.
                socket.on ('correct answer', function (data) {
					$scope.questions[data].submitted = true;
					$scope.questions[data].remarks = "You are correct!";
                });

                $scope.sendAnswer = function ( index ) {
                	socket.emit ('submit answer', {
                		'index' : index,
                		'options' : $scope.questions[index].options
                	});
                	console.log ( index );
                	console.log ( $scope.questions[index].options)
                	$scope.questions[index].answered = true;
                };
			});
			
			lobbyApp.controller ('chatCtrl', function ($scope, $window, socket) {
                $scope.chatMessage = "";
				$scope.messages = [];
                
                var FADE_TIME = 150; // ms
                var TYPING_TIMER_LENGTH = 400; // ms
                var COLORS = [
					'#e21400', '#91580f', '#f8a700', '#f78b00',
					'#58dc00', '#287b00', '#a8f07a', '#4ae8c4',
					'#3b88eb', '#3824aa', '#a700ff', '#d300e7'
                ];
				var lastTypingTime;
                
                var typing = false;
				
				var username = "<%= userId %>";
				
				var $el_messages = $('.messages'); //Messages area
            
                //Socket listeners
                
                //Whenever the server emits 'login', log the login message
                socket.on ('login', function (data) {
                    //Display the welcome message
                    var message = "Welcome to the Lobby ";
                    logMessage ({
						'type' : 'log',
						'message': message
					}, {
                        prepend: true
                    });
                    addParticipantsMessage (data);
                });

                //Whenever the server emits 'new message', update the chat body
                socket.on ('new message', function (data) {
                    addChatMessage (data);
                });
				
				// Whenever the server emits 'user joined', log it in the chat body
                socket.on ('user joined', function (data) {
                    logMessage ({
						'type' : 'log',
						'message' : data.username + ' joined'
					});
                    addParticipantsMessage (data);
                });

                //Whenever the server emits 'user left', log it in the chat body
                socket.on ('user left', function (data) {
                    logMessage ({
						'type' : 'log',
						'message' : data.username + ' left'
					});
                    addParticipantsMessage (data);
                    removeChatTyping (data);
                });

                //Whenever the server emits 'typing', show the typing message
                socket.on ('typing', function (data) {
                    addChatTyping(data);
                });

                //Whenever the server emits 'stop typing', kill the typing message
                socket.on ('stop typing', function (data) {
                    removeChatTyping(data);
                });
				
                //Scope functions.
				
				//Sends a chat message
                $scope.sendMessage = function () {
                    var message = $scope.chatMessage;
                    
                    //Prevent markup from being injected into the message
                    message = cleanInput(message);
                
                    //If there is a non-empty message and a socket connection
                    if (message) {
                        $scope.chatMessage="";
                        
                        addChatMessage({
                            'username': username,
                            'message': message
                        });
                        
                        //Tell server to execute 'new message' and send along one parameter
                        socket.emit ('new message', message);
                    }
					
					socket.emit('stop typing');
					typing = false;
                };
				
				//Gets the color of a username through our hash function
                $scope.getUsernameColor = function (username) {
                    //Compute hash code
                    var hash = 7;
                    for (var i = 0; i < username.length; i++) {
                        hash = username.charCodeAt(i) + (hash << 5) - hash;
                    }
                    
                    //Calculate color
                    var index = Math.abs(hash % COLORS.length);
                    return COLORS[index];
                };
				
				// Updates the typing event
                $scope.updateTyping = function () {
                    if (!typing) {
                        typing = true;
                        socket.emit ('typing');
                    }
                    
                    lastTypingTime = (new Date()).getTime();
                    setTimeout(function () {
                        var typingTimer = (new Date()).getTime();
                        var timeDiff = typingTimer - lastTypingTime;
                        if (timeDiff >= TYPING_TIMER_LENGTH && typing) {
                            socket.emit ('stop typing');
                            typing = false;
                        }
                    }, TYPING_TIMER_LENGTH);
                };
				
				//Private functions.
				
				//Prevents input from having injected markup
                var cleanInput = function (input) {
                    return $('<div/>').text(input).text();
                };
				
				//Adds a message element to the messages and scrolls to the bottom
                //message          	The message to add to chat { user: '', message:'', type:'log || chat' }
                //options.prepend   If the element should prepend all other messages (default = false)
                var logMessage = function (message, options) {
                    //Setup default options
                    if (!options) {
                        options = {};
                    }
                    if (typeof options.fade === 'undefined') {
                        options.fade = true;
                    }
                    if (typeof options.prepend === 'undefined') {
                        options.prepend = false;
                    }

                    if (options.prepend) {
                        $scope.messages.unshift(message);
                    } else {
                        $scope.messages.push(message);
                    }
                    
                    $el_messages[0].scrollTop = $el_messages[0].scrollHeight;
                };
				
				var addParticipantsMessage = function (data) {
                    var message = '';
                    if (data.numUsers === 1) {
                        message += "It's just you and me, honey bee.";
                    } else {
                        message += "There are " + data.numUsers + " players in the Lobby";
                    }
                    logMessage ({
						'type' : 'log',
						'message' : message
					});
                };
				
				//Adds the visual chat message to the message list
                var addChatMessage = function (data, options) {
                    //Don't fade the message in if there is an 'X was typing'
                    var $typingMessages = getTypingMessages(data);
                    options = options || {};
                    if ($typingMessages.length !== 0) {
                        options.fade = false;
                        $typingMessages.remove();
                    }
					
                    logMessage ({
						'user' : data.username,
						'type' : data.typing ? 'typing' : 'chat',
						'message' : data.message
					}, options);
                };
				
				// Adds the visual chat typing message
                var addChatTyping = function (data) {
                    data.typing = true;
                    data.message = 'is typing';
                    addChatMessage (data);
                };

                //Removes the visual chat typing message
                var removeChatTyping = function (data) {
                    getTypingMessages(data).fadeOut (function () {
                        $(this).remove();
                    });
                };

                //Gets the 'X is typing' messages of a user
                var getTypingMessages = function (data) {
                    return $('.typing.message').filter (function (i) {
                        return $(this).data('username') === data.username;
                    });
                };
			});

			lobbyApp.controller ('activeUsersCtrl', function($scope, socket) {
                $scope.users = {};
                
                //Socket events

				// Whenever the server emits 'user joined', log it in the chat body
                socket.on ('user joined', function (data) {
                    $scope.users[data.username] = {
                		'username' : data.username
                    };
                });

                //Whenever the server emits 'user left', log it in the chat body
                socket.on ('user left', function (data) {
                    delete $scope.users[data.username];
                });

			});
        </script>
    </body>
</html>